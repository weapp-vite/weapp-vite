import type { JSONSchema4 } from 'json-schema'
import fs from 'fs-extra'
import { compile } from 'json-schema-to-typescript'
import path from 'pathe'
import { JSON_SCHEMA_DEFINITIONS } from './json'

const websiteHostPath = path.resolve(import.meta.dirname, '../../../website/public')
const typeOutputPath = path.resolve(import.meta.dirname, '../src/type.auto.ts')

const BANNER_COMMENT = `/* eslint-disable */\n/**\n * This file was automatically generated by json-schema-to-typescript.\n * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,\n * and run json-schema-to-typescript to regenerate this file.\n */`

interface SchemaDefinition {
  filename: string
  typeName: string
  schema: JSONSchema4
}

function getSchemaDefinitions(): SchemaDefinition[] {
  return JSON_SCHEMA_DEFINITIONS.map(definition => ({
    filename: definition.filename,
    typeName: definition.typeName,
    schema: definition.schema as JSONSchema4,
  }))
}

async function writeSchemaJson(definition: SchemaDefinition) {
  const filepath = path.resolve(websiteHostPath, definition.filename)
  await fs.outputJSON(filepath, definition.schema, { spaces: 2 })
  return filepath
}

function stripSchemaProperty(code: string) {
  return code
    .split('\n')
    .filter(line => !line.includes('$schema?: string;'))
    .join('\n')
}

async function generateTypeDeclaration(definition: SchemaDefinition) {
  const source = await compile(definition.schema, definition.typeName, {
    bannerComment: BANNER_COMMENT,
    style: {
      singleQuote: false,
    },
  })
  return stripSchemaProperty(source.trim())
}

export async function buildSchemas() {
  const definitions = getSchemaDefinitions()

  await Promise.all(definitions.map(writeSchemaJson))

  const typeBlocks = await Promise.all(definitions.map(generateTypeDeclaration))
  const fileContents = `${typeBlocks.join('\n\n')}\n`

  await fs.writeFile(typeOutputPath, fileContents, 'utf8')
}
